local transf = require "transf"

local vec4 = require "vec4"
local vec2 = require "snowball_streamer_vec2"
local vec3 = require "snowball_streamer_vec3"
local mat3 = require "snowball_streamer_mat3"
local streamer = require "snowball_streamer"

function data()
    return {
        type = "ASSET_DEFAULT",
        buildMode = "MULTI",
        categories = {"misc"},
        availability = {
            yearFrom = 244,
            yearTo = 245
        },
        description = {
            name = _("patch_title"),
            description = _("patch_description")
        },
        order = 197720302,
        skipCollision = true,
        autoRemovable = false,
        params = {},
        soundConfig = {
            soundSet = {name = "snowball_streamer_cascade_large"}
        },
        updateFn = function(params)
            local result = {
                models = {},
                cost = 10,
                bulldozeCost = 10,
                maintenanceCost = 0
            }
            local points = params.points
            local normals = params.normals
            local widths = params.widths
            local depth = params.depth
            local extend = params.extend or 0

            if (not points) or (not normals) or (not widths) or (not depth) then
                result.models[#result.models + 1] = {
                    id = "asset/snowball_streamer_finisher.mdl",
                    transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
                }
                return result
            end

            local ground = streamer.getTerrain(points, normals, widths, depth, extend, "ground")
            local leftShore = streamer.getTerrain(points, normals, widths, depth, extend, "left")
            local rightShore = streamer.getTerrain(points, normals, widths, depth, extend, "right")
            local leftBeach = streamer.getTerrain(points, normals, widths, depth, extend, "left_beach")
            local rightBeach = streamer.getTerrain(points, normals, widths, depth, extend, "right_beach")
            local leftOutline = streamer.getTerrain(points, normals, widths, depth, extend, "left_outline")
            local rightOutline = streamer.getTerrain(points, normals, widths, depth, extend, "right_outline")
            local surface = streamer.getTerrain(points, normals, widths, depth, extend, "surface")

            if (not ground) or (not surface) or (not leftShore) or (not rightShore) then
                result.models[#result.models + 1] = {
                    id = "asset/snowball_streamer_finisher.mdl",
                    transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
                }
                return result
            end

            if not points[1].snapped then
                streamer.createSnapPoint(points[1], normals[1], widths[1])
            end
            if not points[#points].snapped then
                streamer.createSnapPoint(points[#points], normals[#normals], widths[#widths])
            end

            for i = 1, #points do
                if (points[i].isCascadeBottom) then
                    streamer.createCascade(
                        points[i],
                        normals[i],
                        widths[i],
                        points[i - 1][3] - points[i][3],
                        depth,
                        result.models
                    )
                end
            end

            local bed = params.bed
            local fill = "water_ground"
            if bed == 1 then
                fill = "industry_gravel_small_01"
            elseif bed == 2 then
                fill = "industry_gravel_big_01"
            end

            local beach = params.beach
            local stroke = "snowball_streamer_grass_border"
            if beach == 1 then
                stroke = "water_shore"
            end
                       
            result.groundFaces = {
                {
                    face = surface,
                    modes = {
                        {
                            type = "FILL",
                            key = fill
                        },
                        {
                            type = "STROKE",
                            key = stroke
                        }                        
                    }
                }                         
            }
            local ground_faces = {}
            local beach_faces = {}

            --we have to create the triangles ourselfes because UG seems to use an ear clipping algorithm of some kind that generates terrible results
            streamer.triangulateStrip(ground, ground_faces)
            streamer.triangulateStrip(leftShore, ground_faces)
            streamer.triangulateStrip(rightShore, ground_faces)

            streamer.triangulateStrip(leftBeach, beach_faces)
            streamer.triangulateStrip(rightBeach, beach_faces)

            result.terrainAlignmentLists = {
                {
                    type = "EQUAL",
                    faces = ground_faces,
                    slopeLow = 10,
                    slopeHigh = 10
                },
                {
                    type = "GREATER",
                    faces = beach_faces,
                    slopeLow = 10,
                    slopeHigh = 10
                }
            }

            for i = 1, (0.5 * #surface - 1) do
                local point = points[i]
                local right1 = surface[#surface - i + 1]
                local left1 = surface[i]
                local right2 = surface[#surface - i]
                local left2 = surface[i + 1]

                local b2 = vec3.sub(right1, left1)
                local b3 = vec3.sub(left2, left1)

                local affine = mat3.affine(b2, b3)

                local transform =
                    transf.new(
                    vec4.new(affine[1][1], affine[2][1], affine[3][1], .0),
                    vec4.new(affine[1][2], affine[2][2], affine[3][2], .0),
                    vec4.new(affine[1][3], affine[2][3], affine[3][3], .0),
                    vec4.new(left1[1], left1[2], left1[3] - 0.5, 1.0)
                )

                if point.isCascadeTop then
                    result.models[#result.models + 1] = {
                        id = "asset/snowball_streamer_cascade_1.mdl",
                        transf = transform
                    }
                else
                    result.models[#result.models + 1] = {
                        id = "asset/snowball_streamer_water_1.mdl",
                        transf = transform
                    }
                end

                b2 = vec3.sub(left2, right2)
                b3 = vec3.sub(right1, right2)

                local affine = mat3.affine(b2, b3)

                local transform =
                    transf.new(
                    vec4.new(affine[1][1], affine[2][1], affine[3][1], .0),
                    vec4.new(affine[1][2], affine[2][2], affine[3][2], .0),
                    vec4.new(affine[1][3], affine[2][3], affine[3][3], .0),
                    vec4.new(right2[1], right2[2], right2[3] - 0.5, 1.0)
                )

                if point.isCascadeTop then
                    result.models[#result.models + 1] = {
                        id = "asset/snowball_streamer_cascade_2.mdl",
                        transf = transform
                    }
                else
                    result.models[#result.models + 1] = {
                        id = "asset/snowball_streamer_water_2.mdl",
                        transf = transform
                    }
                end
            end

            return result
        end
    }
end
